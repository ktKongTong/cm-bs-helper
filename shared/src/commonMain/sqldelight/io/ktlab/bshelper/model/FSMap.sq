import kotlin.Boolean;
import kotlin.time.Duration;

CREATE TABLE IF NOT EXISTS FSMap (
--  fs
    hash TEXT NOT NULL,
    name TEXT NOT NULL,
    duration INTEGER AS Duration NOT NULL,
    previewStartTime REAL NOT NULL,
    previewDuration INTEGER AS Duration NOT NULL,
    bpm REAL NOT NULL,
    songName TEXT NOT NULL,
    songSubname TEXT NOT NULL,
    songAuthorName TEXT NOT NULL,
    levelAuthorName TEXT NOT NULL,
    relativeCoverFilename TEXT NOT NULL,
    relativeSongFilename TEXT NOT NULL,
    relativeInfoFilename TEXT NOT NULL,
--     fsmap dir name
    dirName TEXT NOT NULL,
--     absolute path to playlist
    playlistBasePath TEXT NOT NULL,
    playlistId TEXT NOT NULL,
    manageFolderId INTEGER NOT NULL,
    active INTEGER AS Boolean NOT NULL DEFAULT 0,
--     beatsaver
    mapId TEXT NOT NULL,
    PRIMARY KEY(mapId, hash, playlistId)
);


selectAll:
SELECT * FROM FSMap WHERE active = 1;
getAllFSMapByPlaylistId:
SELECT * FROM FSMap WHERE playlistId = ? AND active = 1;

getAllByPlaylistId:
SELECT
FSMap.mapId AS mapId,
FSMap.name AS name,
FSMap.dirName AS dirFilename,
FSMap.duration AS duration,
FSMap.relativeCoverFilename AS relativeCoverPath,
FSMap.relativeSongFilename AS relativeSongPath,
FSMap.relativeInfoFilename AS relativeInfoPath,
FSMap.playlistBasePath AS playlistBasePath,
FSMap.manageFolderId AS manageFolderId,
FSMap.hash AS hash,
FSMap.playlistId AS playlistId,
FSMap.active AS active,
FSMap.previewStartTime AS previewStartTime,
FSMap.previewDuration AS previewDuration,
FSMap.bpm AS bpm,
FSMap.songName AS songName,
FSMap.songSubname AS songSubname,
FSMap.songAuthorName AS songAuthorName,
FSMap.levelAuthorName AS levelAuthorName,
BSMapView.*
FROM FSMap
LEFT JOIN BSMapView ON FSMap.mapId = BSMapView.mapId
WHERE FSMap.playlistId = ?
AND FSMap.active = 1;

insert:
INSERT OR REPLACE INTO FSMap
(
mapId,
name,
duration,
relativeCoverFilename,
relativeSongFilename,
relativeInfoFilename,
dirName,
playlistBasePath,
manageFolderId,
playlistId,
hash,
active,
previewStartTime,
previewDuration,
bpm,
songName,
songSubname,
songAuthorName,
levelAuthorName
) VALUES ?;


acitveFSMap:
UPDATE FSMap
SET active = 1
WHERE mapId = ? AND playlistId = ?;

getAllFSMapId:
SELECT mapId,playlistId FROM FSMap WHERE active = 1;

getAllFSMapIdByManageFolderId:
SELECT mapId,playlistId FROM FSMap WHERE active = 1 AND manageFolderId = ?;

moveFSMapToPlaylist:
UPDATE FSMap
SET playlistId = ?,playlistBasePath = ?
WHERE mapId = ? AND playlistId = ?
AND active = 1;

deleteAllFSMap:
DELETE FROM FSMap;

deleteAllFSMapByManageFolderId:
DELETE FROM FSMap WHERE manageFolderId = ?;

deleteFSMapByPlaylistId:
DELETE FROM FSMap WHERE playlistId = ?;

deleteFSMapByPlaylistIds:
DELETE FROM FSMap WHERE playlistId IN ?;

deleteFSMapByMapIdsAndPlaylistId:
DELETE FROM FSMap WHERE mapId IN ? AND playlistId = ?;

deleteFSMapByMapPathsAndPlaylistId:
DELETE FROM FSMap WHERE dirName IN ? AND playlistId = ?;